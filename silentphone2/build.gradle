static buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd HH:mm:ss')
    return formattedDate
}

// Double quote a string. If the string is already double quoted,
// it will be double-quoted yet again.
static dquote(String s) { '"' + s + '"' }

// Return a version number based on a version code and a Jenkins build number.
static mkversion(int versionCode, String buildNumber) {
    (versionCode << 16) | Integer.parseInt(buildNumber)
}

// Return today's UTC date and time string in ISO-8601 format.
static iso8601() {
    new Date().format("yyyy-MM-dd'T'HH:MM:ss'Z'", TimeZone.getTimeZone('GMT'))
}

// Helper function for buildConfigField
static mapToJava(m, javaMapType) {
    "\nnew ${javaMapType}()" +
    "\n{\n  {\n" +
    m.collect { k, v -> "    put(\"${k}\", \"${v}\");" }.join("\n") +
    "\n  }\n}"
}

// Return map of submodule commits ['submodule': 'commitHash']
// where submodule is the last path component of the submodule directory
static submoduleCommits(Map commits) {
    def fnutils = org.apache.commons.io.FilenameUtils
    def pattern = java.util.regex.Pattern
    commits.inject([:]) { m, dir, ss ->
        def pathComponents = fnutils.normalizeNoEndSeparator(dir).split(pattern.quote(File.separatorChar.toString()))
        if (pathComponents.length != 0) {
            def submoduleName = pathComponents.last()
            m[submoduleName] = ss.headId.name[0..7] // use short commit id
        }
        m
    }
}

apply plugin: 'com.android.application'

android {
    // Return today's UTC date and time in ISO8601 format. This is a closure to
    // avoid repeatedly generating a date/time stamp
    def dateToday = { iso8601() }

    // Return either the property named by `propName`, or `defVal` if the
    // property is absent. It is the caller's responsibility to ensure that the
    // `defVal` is the same data type as the property should be.
    // This is a closure because it relies on the `project` value.
    def getVal = { String propName, Object defVal ->
        project.findProperty(propName) ?: defVal
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    // See
    // http://mrhaki.blogspot.com/2015/04/gradle-goodness-use-git-commit-id-in.html
    ext {
        // Open the Git repository by checking for GIT_DIR and/or walking up
        // from the current working directory.
        git = org.ajoberstar.grgit.Grgit.open()
        // Get the jgit interface to the repository
        jgit = git.repository.jgit
    }

    dexOptions {
        jumboMode = true
        javaMaxHeapSize "3g"
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion rootProject.ext.targetSdkVersion

        // Version string: major.minor or major.minor.bug-fix.  When
        // releasing an X.Y version, list only two digits rather than
        // X.Y.Z.
        versionName "6.1"

        // The version code (vc) computes as follows: major*1000 + minor*100 +
        // bug-fix.  This provides up to 100 bug-fix or small feature update
        // releases :-)
        // To create the Android 'versionCode' the script shifts this number
        // left by 16 and adds the Jenkins build number.
        // See the mkversion() function elsewhere in this file.
        def vc = 6100
        def version = mkversion(vc, getVal('build_version_numeric', '0'))
        versionCode version                            // the 'versionCode' goes into the AndroidManifest

        applicationId "com.silentcircle.silentphone"

        def javaMapType = 'java.util.LinkedHashMap<String, String>'
        def jgitSubSts = jgit.submoduleStatus().call()

        buildConfigField 'String', 'SPA_BUILD_NUMBER', dquote(getVal('build_version', 'DEBUG'))
        buildConfigField 'String', 'SPA_BUILD_COMMIT', dquote(getVal('build_commit', git.describe()))
        buildConfigField 'String', 'SPA_BUILD_DATE', dquote(getVal('build_date', dateToday()))
        buildConfigField 'String', 'AUTHORITY_BASE', dquote('com.silentcircle')
        buildConfigField 'boolean', 'MAIN_PACKAGE', 'true'
        buildConfigField 'boolean', 'ACRA_ENABLED', getVal('acra_enabled', 'true')
        buildConfigField javaMapType, 'SUBMODULE_BUILD_COMMITS', mapToJava(submoduleCommits(jgitSubSts), javaMapType)

        manifestPlaceholders = [AUTHORITY_BASE:"com.silentcircle"]

        ndk {
            abiFilters "armeabi-v7a" // , "armeabi" - I don't think we see old ARM devices in the field anymore
        }
        lintOptions {
            checkReleaseBuilds false
            abortOnError false
        }
        testApplicationId "com.silentcircle.silentphone2.tests"

        // Enabling multidex support.
//        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    // Comment from Android gradle plugin documentation:
    // Note: srcDir will actually add the given folder to the existing list of source folders
    // (this is not mentioned in the Gradle documentation but this is actually the behavior).

    // We directly source-in the Java sources and don't use the jar files of the modules.
    sourceSets {
        main {
            java {
                srcDir '../ImageViewTouch/src/main/java'
            }
            jniLibs.srcDirs = ['libs']
        }
    }

    productFlavors {
        normal {
        }
        dev21 {
            minSdkVersion 21
        }
        bp {
            applicationId "com.silentcircle.bp.silentphone"
            buildConfigField "String", "AUTHORITY_BASE", "\"com.silentcircle.bp\""
            buildConfigField "boolean", "MAIN_PACKAGE", "false"
            manifestPlaceholders = [AUTHORITY_BASE: "com.silentcircle.bp"]
        }
    }

    signingConfigs {
        sc {
            storeFile file(".build-release/test-debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled true
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            zipAlignEnabled true
            // ACRA disabled by default in debug builds
            buildConfigField "boolean", "ACRA_ENABLED", "false"
        }
        fastDebug {
            debuggable true
            minifyEnabled false
            multiDexEnabled true
            signingConfig signingConfigs.debug
            zipAlignEnabled true
            // ACRA disabled by default in debug builds
            buildConfigField "boolean", "ACRA_ENABLED", "false"
        }
        develop {
            debuggable true
            minifyEnabled true
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.sc
            zipAlignEnabled true
        }
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.sc
            zipAlignEnabled true
        }
    }
//
//    externalNativeBuild {
//        //  If you want to link Gradle to an existing ndk-build project, use the ndkBuild {} block instead
//        // of cmake {}, and provide a relative path to your Android.mk file. Gradle also includes the
//        // Application.mk file if it is located in the same directory as your Android.mk file.
//        ndkBuild {
//            path "jni/Android.mk"
//        }
//    }
//
//    tasks.withType(ndkBuild) {
//        compileTask -> compileTask.dependsOn ndkBuild
//        print "+++ Huhu - ndk build"
//    }
}

android.applicationVariants.all { variant ->
    variant.mergedFlavor.manifestPlaceholders += variant.buildType.debuggable ? [backup:"true"] : [backup:"false"]
}

// Example how to define a XML resource during build
//android.applicationVariants.all { variant ->
//    variant.resValue "bool", "backup", variant.buildType.isDebuggable() ? "true" : "false"
//}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.googlecode.libphonenumber:libphonenumber:7.2.1'
    compile 'com.googlecode.libphonenumber:geocoder:2.31'
    compile 'com.android.support:appcompat-v7:25.4.0'
    compile 'com.android.support:design:25.4.0'
    compile 'com.android.support:support-v13:25.4.0'
    compile 'com.android.support:palette-v7:25.4.0'
    compile 'com.android.support:cardview-v7:25.4.0'
    compile 'com.android.support:recyclerview-v7:25.4.0'
    compile 'com.google.android.gms:play-services-gcm:11.0.2'
//    compile 'com.android.support:multidex:1.0.1'
    compile 'com.stripe:stripe-android:1.0.0'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'ch.acra:acra:4.9.2'
//    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta1'
    compile 'com.getkeepsafe.taptargetview:taptargetview:1.9.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'net.danlew:android.joda:2.9.9'
}

apply plugin: 'com.google.gms.google-services'
